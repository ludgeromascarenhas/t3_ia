//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.11.10 at 11:45:09 AM BRST 
//


package org.cogroo.config;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Analyzer.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="Analyzer">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="sentenceDetector"/>
 *     &lt;enumeration value="tokenizer"/>
 *     &lt;enumeration value="nameFinder"/>
 *     &lt;enumeration value="contractionFinder"/>
 *     &lt;enumeration value="posTagger"/>
 *     &lt;enumeration value="featurizer"/>
 *     &lt;enumeration value="lemmatizer"/>
 *     &lt;enumeration value="chunker"/>
 *     &lt;enumeration value="headFinder"/>
 *     &lt;enumeration value="shallowParser"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "Analyzer")
@XmlEnum
public enum Analyzers {

    @XmlEnumValue("sentenceDetector")
    SENTENCE_DETECTOR("sentenceDetector"),
    @XmlEnumValue("tokenizer")
    TOKENIZER("tokenizer"),
    @XmlEnumValue("nameFinder")
    NAME_FINDER("nameFinder"),
    @XmlEnumValue("contractionFinder")
    CONTRACTION_FINDER("contractionFinder"),
    @XmlEnumValue("posTagger")
    POS_TAGGER("posTagger"),
    @XmlEnumValue("featurizer")
    FEATURIZER("featurizer"),
    @XmlEnumValue("lemmatizer")
    LEMMATIZER("lemmatizer"),
    @XmlEnumValue("chunker")
    CHUNKER("chunker"),
    @XmlEnumValue("headFinder")
    HEAD_FINDER("headFinder"),
    @XmlEnumValue("shallowParser")
    SHALLOW_PARSER("shallowParser");
    private final String value;

    Analyzers(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static Analyzers fromValue(String v) {
        for (Analyzers c: Analyzers.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
